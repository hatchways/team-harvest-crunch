#!/usr/bin/env node

/* Sets up the environment variables from your .env file*/
require("dotenv").config();

/**
 * Module dependencies.
 */

var app = require("../app");
var http = require("http");

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || "3001");
app.set("port", port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

//socket io
const io = require("socket.io")(server, {
    cors: {
        origin: "http://localhost:3000",
        methods: ["GET", "POST"]
    }
});
const Conversations = require("../models/conversations");

io.on("connection", socket => {
    const id = socket.handshake.query.id;
    socket.join(id);
    console.log(socket.id);
    socket.on("send-message", async ({ users, messageObj }) => {
        console.log(socket.id);
        const filterObj = {};
        filterObj["users"] = users;
        let conversation = await Conversations.find(filterObj);
        if (conversation.length > 0) {
            conversation[0].messages.push(messageObj);
            const updatedConversation = conversation[0];
            conversation = updatedConversation;
        } else {
            conversation = new Conversations({ users, messages });
        }

        try {
            await conversation.save();
            const { messages, _id: conversationId } = conversation;
            const lastmsg = messages[messages.length - 1];
            // users.map(user => {
            //     socket.to(user).emit("receive-message", {
            //         conversationId,
            //         users,
            //         lastmsg
            //     });
            // });

            io.to(users[1]).emit("receive-message", {
                conversationId,
                users,
                lastmsg
            });
        } catch (err) {
            console.error(err.message);
        }
    });
});
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== "listen") {
        throw error;
    }

    var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case "EACCES":
            console.error(bind + " requires elevated privileges");
            process.exit(1);
            break;
        case "EADDRINUSE":
            console.error(bind + " is already in use");
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;

    console.log("Listening on " + bind);
}
